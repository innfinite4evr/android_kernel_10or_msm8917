/* Copyright (c) 2011-2015, The Linux Foundation. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
#ifndef MSM_EEPROM_H
#define MSM_EEPROM_H

#include <linux/i2c.h>
#include <linux/gpio.h>
#include <soc/qcom/camera2.h>
#include <media/v4l2-subdev.h>
#include <media/msmb_camera.h>
#include "msm_camera_i2c.h"
#include "msm_camera_spi.h"
#include "msm_camera_io_util.h"
#include "msm_camera_dt_util.h"
#include <uapi/media/msm_camsensor_sdk.h>

struct msm_eeprom_ctrl_t;

#define DEFINE_MSM_MUTEX(mutexname) \
	static struct mutex mutexname = __MUTEX_INITIALIZER(mutexname)

#define PROPERTY_MAXSIZE 32

struct msm_eeprom_ctrl_t {
	struct platform_device *pdev;
	struct mutex *eeprom_mutex;

	struct v4l2_subdev sdev;
	struct v4l2_subdev_ops *eeprom_v4l2_subdev_ops;
	enum msm_camera_device_type_t eeprom_device_type;
	struct msm_sd_subdev msm_sd;
	enum cci_i2c_master_t cci_master;
	enum i2c_freq_mode_t i2c_freq_mode;

	struct msm_camera_i2c_client i2c_client;
	struct msm_eeprom_board_info *eboard_info;
	uint32_t subdev_id;
	int32_t userspace_probe;
	struct msm_eeprom_memory_block_t cal_data;
	uint8_t is_supported;
};

struct msm_camera_i2c_reg_array hi1332_readotp_init_regval[] = {
	{0x0a00, 0x0000, 0x0000},
	{0x2ffe, 0xe000, 0x0000},
	{0x3048, 0x0140, 0x0000},
	{0x404a, 0x0000, 0x0000},
	{0x304c, 0x4b0b, 0x0000},
	{0x404c, 0xf828, 0x0000},
	{0x304e, 0x0088, 0x0000},
	{0x404e, 0x0000, 0x0000},
	{0x3050, 0xFB80, 0x0000},
	{0x4050, 0x0300, 0x0000},
	{0x0c00, 0x1190, 0x0000},
	{0x0c02, 0x0011, 0x0000},
	{0x0c04, 0x0000, 0x0000},
	{0x0c06, 0x01b0, 0x0000},
	{0x0c10, 0x0040, 0x0000},
	{0x0c12, 0x0040, 0x0000},
	{0x0c14, 0x0040, 0x0000},
	{0x0c16, 0x0040, 0x0000},
	{0x0c18, 0x8000, 0x0000},
	{0x0000, 0x0000, 0x0000},
	{0x003c, 0x0000, 0x0000},
	{0x000a, 0x0100, 0x0000},
	{0x0322, 0x0101, 0x0000},
	{0x0012, 0x0000, 0x0000},
	{0x0018, 0x108f, 0x0000},
	{0x0804, 0x0008, 0x0000},
	{0x0008, 0x0258, 0x0000},
	{0x0024, 0x002e, 0x0000},
	{0x002a, 0x003d, 0x0000},
	{0x0026, 0x0040, 0x0000},
	{0x002c, 0x0c6f, 0x0000},
	{0x005c, 0x0202, 0x0000},
	{0x002e, 0x1111, 0x0000},
	{0x0032, 0x1111, 0x0000},
	{0x0006, 0x0D02, 0x0000},
	{0x0a0e, 0x0001, 0x0000},
	{0x0a10, 0x400c, 0x0000},
	{0x0a12, 0x1070, 0x0000},
	{0x0a14, 0x0c30, 0x0000},
	{0x003e, 0x0000, 0x0000},
	{0x0004, 0x0bb8, 0x0000},
	{0x0054, 0x012c, 0x0000},
	{0x0a02, 0x0100, 0x0000},
	{0x0a04, 0x014a, 0x0000},
	{0x0046, 0x0000, 0x0000},
	{0x003a, 0x0000, 0x0000},
	{0x0050, 0x4300, 0x0000},
	{0x0722, 0x0300, 0x0000},
	{0x0756, 0x010b, 0x0000},
	{0x0758, 0x3f3f, 0x0000},
	{0x0726, 0x04a0, 0x0000},
	{0x0728, 0x04a4, 0x0000},
	{0x005e, 0xf000, 0x0000},
	{0x0060, 0x0000, 0x0000},
	{0x0062, 0x0000, 0x0000},
	{0x0208, 0x0c30, 0x0000},
	{0x021c, 0x0001, 0x0000},
	{0x021e, 0x0535, 0x0000},
	{0x051a, 0x0100, 0x0000},
	{0x0518, 0x0200, 0x0000},
	{0x0900, 0x0300, 0x0000},
	{0x0928, 0x0000, 0x0000},
	{0x0902, 0xc31a, 0x0000},
	{0x0914, 0xc105, 0x0000},
	{0x0916, 0x030b, 0x0000},
	{0x0918, 0x0203, 0x0000},
	{0x091a, 0x0505, 0x0000},
	{0x091c, 0x0603, 0x0000},
	{0x091e, 0x0506, 0x0000},
	{0x090c, 0x0882, 0x0000},
	{0x090e, 0x0036, 0x0000},
	{0x004c, 0x0100, 0x0000},
	{0x0800, 0x0000, 0x0000},
	{0x0a00, 0x0100, 0x0000},
};

struct msm_camera_i2c_reg_setting hi1332_otp_read_init_setting = {
	.reg_setting = hi1332_readotp_init_regval,
	.size = ARRAY_SIZE(hi1332_readotp_init_regval),
	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
	.data_type = MSM_CAMERA_I2C_WORD_DATA,
	.delay = 0,
};

#endif
